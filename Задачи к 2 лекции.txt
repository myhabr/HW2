----------------------------------------------------------------------------------------------------------------------------------------
								Списки
----------------------------------------------------------------------------------------------------------------------------------------
1.Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.

2.Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару.

3.Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них.
task2_list_var3

4.Найти все уникальные элементы в списке. Список произвольной длины и может состоять как из чисел, так и строк.

5.Программа получает на вход невозрастающую последовательность натуральных чисел. После этого вводится число X. Все числа во входных данных натуральные и не превышают 200.
Выведите индекс, где окажется число Х. Если в списке есть элемент с таким значением, то число Х помещается после него.

6.Даны имена и средняя успеваемость учеников класса. Необходимо вывести имена одного или нескольких учеников, находящихся на предпоследнем месте по успеваемости.
Формат входных данных.
Набор студентов представлен списком длиной N, то есть количество учеников в классе, каждый элемент которого представлен в виде вложенного списка из двух элементов: Имя, оценка. 
Например:
students = [ [Петя, 4.5], [Вася, 4.3], [Коля, 3.5], [Никита, 4.8], [Катя, 4.3] ]
Формат выходных данных.
Вывести только имена учеников, чьи оценки предпоследние с конца.
Вернемся к примеру
Наименьшая оценка из учеников 3.5, следующая по возрастанию 4.3. Присутствуют два ученика с такой оценкой: Вася и Катя.

#7.Даны два списка произвольной длины каждый. Списки могут содержать как числа, так и строки. Необходимо вывести только те элементы, которые входят как первый список, так и во второй.

-------------------------------------------------------------------------------------------------------------------------------------------
								Функции
-------------------------------------------------------------------------------------------------------------------------------------------
#1. Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющая расстояние между точкой (x1,y1) и (x2,y2). Считайте четыре действительных числа и выведите результат работы этой функции.

2. Дано действительное положительное число a и целоe число n.
Вычислите a в степени n. Решение оформите в виде функции power(a, n).
Стандартной функцией возведения в степень пользоваться нельзя.

3. Написать функцию is_prime, принимающую 1 аргумент — число от 0 до 1000, и возвращающую True, если оно простое, и False - иначе.

4. Дан список результатов попыток одного спортсмена для некоторого соревнования. 
Написать функцию, которая считает сколько за сессию был установлен новый рекорд, т.е. текущее значение превышает значение максимального.

Например
Имеем список результатов.:
scores = [10, 5, 20, 20, 4, 5, 2, 25, 1]. 
В данном случае ответ: 2. 

5. Написать функцию avaranger, которая принимает 1 аргумент - любое число и возвращается среднее арифметическое значение, на основании текущего числа и предыдущих, которые были введены ранее.

Например
>>> avaranger(10) # Среднее арифметическое 10
>>> 10
>>> avaranger(11) # Среднее арифметическое 10 и 11
>>> 10.5 
>>> avaranger(12) # Среднее арифметическое 10, 11 и 12
>>> 11 

6. Реализовать функцию-валидатор почтовых адресов.  Принимает строку, которая содержит адрес электронной почты. Возвращает True, если адрес валидный, иначе возвращает False.

Валидным адресом называется такой, который удовлетворяет следующим условиям:
1. Имеет формат username@websitename.extension 
2. username может содержать только латинские буквы, целые числа, нижние подчеркивания и тире
3. websitename содержит только латинские буквы и целые числа
4. Максимальная длина extension 3 символа.

7. Реализовать функцию map, принимающей два аргумента: список и произвольную арифметическую функцию. 
Функция map должна возвращать новый список, элементы которого являются результатом функции func.

Например
Определим функцию func(x), которая возвращает квадрат аргумента:
>>> def func(x):
>>>     return x**2
>>>
Где-то выше определили функцию map и передали ей список и ссылку на функцию:
>>> map([1, 2, 3], func) 
В результате получаем:
>>> [1, 4, 9]
